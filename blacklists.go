// Code generated by "esc -o blacklists.go -pkg idmatch -prefix blacklists -modtime 1562752805 blacklists"; DO NOT EDIT.

package idmatch

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/domains.csv.gz": {
		name:    "domains.csv.gz",
		local:   "blacklists/domains.csv.gz",
		size:    120,
		modtime: 1562752805,
		compressed: `
H4sIAAAAAAAC/wB4AIf/H4sICPtRH10AA2RvbWFpbnMuY3N2ACXLOw6AIBAA0Z67uHcw2lggZ1hgAyTA
Ej5Gb6/B7k0xo1FtkLlSiQ+40P3QYDgJujGVSNOdWp+wVChb1Pxnr3iFtpgAXJ3YlVyPEzYlRWSD0fN3
TVlOGLJ4AQ+bZZtsAAAAAQAA///9U14meAAAAA==
`,
	},

	"/emails.csv.gz": {
		name:    "emails.csv.gz",
		local:   "blacklists/emails.csv.gz",
		size:    658,
		modtime: 1562752805,
		compressed: `
H4sIAAAAAAAC/wCSAm39H4sICPtRH10AA2VtYWlscy5jc3YAjVTBstsgDLznVzr2uUf+o9ODDApWDYgR
kDy/r6/ATl/Szmt7yAxWkLS7WrHhVsxaYwALDuM+S7s4vOFbFiwF3yDmgAtX0wpKmRML5rDPnuraltly
vPiVSzUaWJi3EbEkNqAlY6+TF8jrLOiFn5MqltqrLhBgoTpiJe3b1IP9MBNfvCCmDTGjfNP4988xtGQ5
Xck3QWdSC2EumTzXaGcWf8HA++xwxkQev1i2DJldeVToPX0ECqPWj5VyqSgDyuNjrmjXy/a1TJYm4b8K
YlfhiCN9HKnFgUIw8Q0q/oPLGXpC5EEcJhRTMRWWa+D7KAjJCZOblkbBTRHF6x3P7AMegracWapxqmBy
oG0PgioqpTK9nXd1NC2Xl953XIIiHV0oes1cMeQnSPqLVP/kCO86gilTxkAJy/9RnRS3ULXsUPBGeH8m
MQxBFQPCdQR4KeQI0qQRTSg6IaNjX+Fgp2R12qYK3KhPa8BSd1SwOs7iFNhNxs2zF6s4Rf/dxs0j77f0
pAN3u4EI75xOw22J78mcCzJi5/kllng6p/nBGlyk18zO8eEOyPmDd937Ho1dSN1TZS9H9vgc2BZwfewq
Htj9qJ98CyCTDWTOc6/QzZvbEkgVS376q4V/efAjNPoUc+VSoJd7mOuqV0uVvcdO8R7UOryCEVIlqzLo
vMqxFhGk7qlpa6wXmzOk1xXUHYNWOaocbupPRTGLMDh1baXaTmMe4EbBvLfcAezcXoTNOnfmZCK/Uwhw
Pj0QjRW+O80kexi/v2H6dDz7/goW+5M2PfX5VLD7qhYt3MR2hqFOKsuZ+J87APfSF0CdKM9G070LbHau
sHFn+BNdwP3BsAUAAAEAAP//VY4dZZICAAA=
`,
	},

	"/names.csv.gz": {
		name:    "names.csv.gz",
		local:   "blacklists/names.csv.gz",
		size:    596,
		modtime: 1562752805,
		compressed: `
H4sIAAAAAAAC/wBUAqv9H4sICPtRH10AA25hbWVzLmNzdgBVUzGW3SAM7DkFZVKQItfJSyGDbOsbEE+A
vd7TR9j++zYtSKPRzGhBEWrWc0AruBMeZqG29slibihFqKJJ/Ekxgi2cG3M2AWfosbkMCc3MtcLE7d3X
K8r1cazUsHIXj25iLZ9Z3F30R+v/Gvjsgq5QwUgZ6/3o2TMUDnVACmbeoeH91QR2quZUSHtN2HCr2lDO
CQSczt3Jo5k6xaA8YzW1nRE92YFVz9owWQiJMlXFaixm7F0biPWQQc5nhNWWsYY5cIo6XnkEu0KzAXeM
XFCqjdCzX7Xmq8X0qefWjf7nutLciN1dVSA86pisA5PvzvfaOLmLq8Ivws7PDnrjRn5zg/DKSjjYNwdf
CuRLZ0HMG6LSeHRZcRgI/rQThEU5CWsdZM5n4l7Na6WiWHLp0GCDhZtfdfmU1PsL846BswNrFsIc4vk9
FXaoq8jqoQom5y/isdLEfJNdMie0qkWuypY4W+Hx/r/cbz+vmS/dgnJ1HxdAzeeNBDkIU7ilcQllLFRb
DxpIQ2nRGijF9MzzTJ4gvnokSCTCMvrL2csF1NQGljnyoZsvIAowkK4YXMZ7UC9OM4PHsYd9Ajx6tz5p
ilHza4vw8X2Z9zU8UXYanxwUvep2he/CnrfMxziUEvlMynyg2h+zcLJfgflp0Ed1Rt1T1XVWs+A9a4jM
lT6varob8FWDHsl+O4j+t31O8I7piOVHUWMqfkAqES9B9foiwjxIqJ3jRJ+zO6p9597ssOiUZmbv3a3h
pd0/yIvdDhcEAAABAAD//2U7sTtUAgAA
`,
	},

	"/popular_emails.csv.gz": {
		name:    "popular_emails.csv.gz",
		local:   "blacklists/popular_emails.csv.gz",
		size:    442,
		modtime: 1562752805,
		compressed: `
H4sIAAAAAAAC/wC6AUX+H4sICPtRH10AA3BvcHVsYXJfZW1haWxzLmNzdgB9U8ty5CAMvPtXUqbWnkey
N/4kJbAWswE0ATxeKpV/Xz9mJtixczCoUKu7BbLSsQzJSR69NiIxi42GwpFDPi5Mki16FFy7RuMQMPKq
+Eutawg5/gN7MTOoqg/8/X0KDYLqkPcxVAcGMRqSYJjDWEQM8Y4CDtOOFrRZUx1P5zvuDxEX4Kf4Sl0Y
oPiAdgG9A4t8DAJz5PFiElM6tp3I6cd1lhVyIWbTdwPAxQOrHpVXUB5c5LedXeemh28mwhUHMCg+dPP5
9HF3+blvc5IsTvX5+Hx4UuL3eR96O+KKSN3EHJXfzoYKnlUN9uycSNT57EIqXuWvpi3I8rx8tq8Hreu9
THXczEx0u0WltmX1/FN25ST0OspWeOxfBci37sI9CQOCGVh4WUuCS4KaNLYtB443Pc1x1tevffenzRQ0
VjsdIvkwojbm/Gty7i+Wz0eu8NMNDOmqWuZvNJmAxwZkxGZLYaDZ7qAnH9s0drFucbK/TVWvvLQJyQ1G
3MtL5geMlsvfIbRd6mSLjmthpxPtFDEHDfqs8D/Qw4CRjwQAAAEAAP//jWriCLoBAAA=
`,
	},

	"/popular_names.csv.gz": {
		name:    "popular_names.csv.gz",
		local:   "blacklists/popular_names.csv.gz",
		size:    3405,
		modtime: 1562752805,
		compressed: `
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
AQAA///1Dz4nTQ0AAA==
`,
	},

	"/top_level_domains.csv.gz": {
		name:    "top_level_domains.csv.gz",
		local:   "blacklists/top_level_domains.csv.gz",
		size:    100,
		modtime: 1562752805,
		compressed: `
H4sIAAAAAAAC/5Lv5uD4HSgfy8Bckl8Qn5NalpoTn5Kfm5iZV6yXXFzGoHvKkavBgMfl4t85Lv2iJQqN
JhfNKuq43777+PNo4Ic9R0yXm0gXpgt3h27/elRQ0iYx8I1i3/Lb6q473ojad0edEPZhYGAABAAA///1
xmcfZAAAAA==
`,
	},

	"/": {
		name:  "/",
		local: `blacklists`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"blacklists": {
		_escData["/domains.csv.gz"],
		_escData["/emails.csv.gz"],
		_escData["/names.csv.gz"],
		_escData["/popular_emails.csv.gz"],
		_escData["/popular_names.csv.gz"],
		_escData["/top_level_domains.csv.gz"],
	},
}
